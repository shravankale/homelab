# Docker Compose for PiHole, meant to be deployed on Portainer
# Works with Traefik, a proxy server using labels
# 1.  Ports:
#     - "53:53/tcp" #Required for dns traffic
#     - "53:53/udp" ##Required for dns traffic
#     - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
#     - "80:80" #Required for the dashboard
# 2.  Configuration data
#     - Configuration for pihole and dnsmasq is stored on host directory $HOME/services/{pihole_data|dnsmasq_data}
# 3.  PiHole dashboard password: Supplied with environment varaible $PIHOLE_PWD using Portainer
# 4.  Connect the container to the same network as the network proxy, "proxy" in this case
# 5. Note: Under Settings->DNS test setting "Respond only on interface eth0" to resolve local devices being blocked
# 5.  Note: More on why hardcoding the ip address under ports https://stackoverflow.com/questions/64007727/docker-compose-internal-dns-server-127-0-0-11-connection-refused/69994721#69994721

services:
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    environment:
      - TZ=Asia/Kolkata
      #TODO: Replace with Docker secrets, if easier
      - WEBPASSWORD=${PIHOLE_PWD}
    ports: 
      - "<host_ip_address>53:53/tcp" #Adding IP address helps with containers on bridge network being able to communicate. Wasn't getting dns resolution without the ip
      - "<host_ip_address>53:53/udp"
      - "8011:80" #Added a random 8011 port mapped to 80 to access the dashboard on the host network in the case pihole container is not functioning to resolve it's own domain
    volumes:
      - "pihole_data:/etc/pihole"
      - "dnsmasq_data:/etc/dnsmasq.d"
    restart: unless-stopped
    networks:
      - proxy
    env_file: #Used for Portainer to add environment variables
      - stack.env
volumes:
  pihole_data:
    external: true
  dnsmasq_data:
    external: true
networks:
  proxy:
    external: true